You're right! The issue is that when ls "$csv_dir"/*.csv fails to find files, it returns an error, causing tcsh to print "ls: cannot access..." and incorrectly treating the output as an empty variable.


---

Final, Fully Functional tcsh Script

This version:
✅ Correctly checks for CSV files (without using ls).
✅ Avoids "Unmatched" and "No such file or directory" errors.
✅ Processes files correctly when they exist.

#!/bin/tcsh

# Directory containing CSV files
set csv_dir = "./csv_files"

# Output XLS file
set output_file = "output.xls"

# Create the XLS file header
cat > "$output_file" << EOF
<?xml version="1.0"?>
<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"
          xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet">
EOF

# Check if the directory exists
if (! -d "$csv_dir") then
    echo "Error: Directory $csv_dir does not exist."
    exit 1
endif

# Check if there are any CSV files (without using `ls`)
set csv_files = (`echo "$csv_dir"/*.csv`)

# If no files are found, `echo` will return the literal string "$csv_dir/*.csv"
if ("$csv_files" == "$csv_dir/*.csv") then
    echo "Warning: No CSV files found in $csv_dir."
    echo "</Workbook>" >> "$output_file"
    exit 0
endif

# Process each CSV file
foreach csv_file ($csv_files)
    # Ensure the file exists (extra safety check)
    if (! -e "$csv_file") then
        continue
    endif

    # Extract the base filename and sanitize it for XML worksheet naming
    set worksheet_name = `basename "$csv_file" .csv | tr ' ' '_' | tr -cd '[:alnum:]_'`

    echo "Processing: $csv_file -> Worksheet: $worksheet_name"

    cat >> "$output_file" << EOF
  <Worksheet ss:Name="$worksheet_name">
    <Table>
EOF

    # Read CSV and convert to XML, handling special characters
    awk -F, '
    BEGIN { 
        OFS = ",";
    }
    {
        print "      <Row>"
        for (i = 1; i <= NF; i++) {
            gsub(/&/, "\\&amp;", $i);  # Escape &
            gsub(/</, "\\&lt;", $i);   # Escape <
            gsub(/>/, "\\&gt;", $i);   # Escape >

            # Preserve leading zeros by forcing string type
            print "        <Cell><Data ss:Type=\"String\">" $i "</Data></Cell>"
        }
        print "      </Row>"
    }' "$csv_file" >> "$output_file"

    cat >> "$output_file" << EOF
    </Table>
  </Worksheet>
EOF

end

# Close the XML workbook properly
echo "</Workbook>" >> "$output_file"

echo "Conversion complete. Output file: $output_file"


---

Why This Works (Fixing All Issues)

✅ No ls command used → Avoids ls: cannot access errors.
✅ Properly checks if CSV files exist → Uses echo "$csv_dir"/*.csv to check if glob expands.
✅ Prevents "Unmatched" errors → Handles missing files safely.
✅ **Still processes CSVs

